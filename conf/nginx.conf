#运行用户
user  www www;

#定义了nginx对外提供web服务时的worder进程数
worker_processes  auto;

#告诉nginx只能记录严重的错误
error_log  /home/vagrant/nginx/logs/error.log crit;

pid   /home/vagrant/nginx/logs/nginx.pid;

#更改worker进程的最大打开文件数限制
worker_rlimit_nofile 51200;

events {
        #设置用于复用客户端线程的轮询方法linux > 2.6, BSD 为 kqueue
        use epoll;

        #设置可由一个worker进程同时打开的最大连接数
        worker_connections 51200;

        #告诉nginx收到一个新连接通知后接受尽可能多的连接。
        multi_accept on;
    }


http {
    include       mime.types;
    default_type  application/octet-stream;

    #关闭在错误页面中的nginx版本数字，这样对于安全性是有好处的。
    server_tokens off;

    #log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
    #                  '$status $body_bytes_sent "$http_referer" '
    #                  '"$http_user_agent" "$http_x_forwarded_for"';

    #access_log  logs/access.log  main;

    #sendfile()可以在磁盘和TCP socket之间互相拷贝数据(或任意两个文件描述符)。Pre-sendfile是传送数据之前在用户空间申请数据缓冲区。之后用read()将数据从文件拷贝到这个缓冲区，write()将缓冲区数据写入网络。sendfile()是立即将数据从磁盘读到OS缓存。因为这种拷贝是在内核完成的，sendfile()要比组合read()和write()以及打开关闭丢弃缓冲更加有效
    sendfile        on;

    #告诉nginx在一个数据包里发送所有头文件，而不一个接一个的发送
    tcp_nopush     on;


    #告诉nginx不要缓存数据，而是一段一段的发送--当需要及时发送数据时，就应该给应用设置这个属性，这样发送一小块数据信息时就不能立即得到返回值。
    tcp_nodelay     on;

    #设置nginx是否将存储访问日志。关闭这个选项可以让读取磁盘IO操作更快(aka,YOLO)
    access_log off;

    #给客户端分配keep-alive链接超时时间。服务器将在这个超时时间过后关闭链接。我们将它设置低些可以让ngnix持续工作的时间更长。
    keepalive_timeout  10;

    #设置请求头和请求体(各自)的超时时间。我们也可以把这个设置低些。
    client_header_timeout 10;
    client_body_timeout 10;

    #告诉nginx关闭不响应的客户端连接。这将会释放那个客户端所占有的内存空间。
    reset_timedout_connection on;

    #指定客户端的响应超时时间。这个设置不会用于整个转发器，而是在两次客户端读取操作之间。如果在这段时间内，客户端没有读取任何数据，nginx就会关闭连接。
    send_timeout 10;

    include /home/vagrant/nginx/conf/conf.d/*.conf;

    gzip  on;

    server {
        listen 80;
        server_name localhost;
        root html;
        index index.php index.html index.htm;
        location / {
            try_files $uri $uri/ /index.php$is_args$args;
        }
        location ~ \.php$ {
            try_files $uri =404;
            include fastcgi.conf;
            fastcgi_pass unix:/home/vagrant/php/php71/var/run/php-cgi.sock;
        }
    }
}
